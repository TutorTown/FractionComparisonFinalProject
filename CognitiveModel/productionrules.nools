// import("types.nools");
function canCompare(n1, d1, n2, d2) {
	if (n1 === n2 || d1 === d2 || (n1/d1 < 1 && n2/d2 > 1) || (n1/d1 > 1 && n2/d2 < 1)) {
		return true;
	} else {
		return false;
	}
}

rule bootstrap {
	when {
		b: Boolean b === true from true;
	}
	then {


			// Fill in fractions for comparision
			assert(new TPA("num1", "UpdateTextArea", num1));
			assert(new TPA("den1", "UpdateTextArea", den1));
			assert(new TPA("num2", "UpdateTextArea", num2));
			assert(new TPA("den2", "UpdateTextArea", den2));



			// let skills = CTAT.ToolTutor.tutor.getProblemSummary().getSkills().getAllSkills();
			// console.log("\n\nskills");
			// console.log(skills);

			// // Reveal step 1 worked example version
			// assert(new TPA("step_1_reason_container", "SetVisible", true));
			// assert(new TPA("step_1_worked", "SetVisible", true));
			// let workedExampleText = "";
			// if (canCompare(num1, den1, num2, den2)) {
			// 	workedExampleText = "We can compare these two fractions without writing them differently. Do you know why?";
			// } else {
			// 	workedExampleText = "We can't compare these two fractions without making some changes first. Do you know why?";
			// }
			// console.log(workedExampleText);
			// assert(new TPA("step_1_worked", "UpdateTextArea", workedExampleText));

			// Create Problem
			assert(new Problem(num1, den1, num2, den2));

			setProblemAttribute("use_backtracking", true);
			halt();		

	}
}

rule loadSkills {
	when {
			p: Problem p.goal === "loadSkills";
	}
	then {


			if (checkSAI({selection: "don't_care", action: "don't_care", input: "don't_care"})) {
				let skills = CTAT.ToolTutor.tutor.getProblemSummary().getSkills().getAllSkills();
				console.log("\n\nskills");
				console.log(skills);

				// Reveal step 1 worked example version
				assert(new TPA("step_1_reason_container", "SetVisible", true));
				assert(new TPA("step_1_worked", "SetVisible", true));
				let workedExampleText = "";
				if (canCompare(num1, den1, num2, den2)) {
					workedExampleText = "We can compare these two fractions without writing them differently. Do you know why?";
				} else {
					workedExampleText = "We can't compare these two fractions without making some changes first. Do you know why?";
				}
				console.log(workedExampleText);
				assert(new TPA("step_1_worked", "UpdateTextArea", workedExampleText));
				assert(new TPA("step_1_worked", "lock", false));	
				modify(p, "goal", "step1");
				halt();
			}

	}
}

////////////////////////
// Step 1 Explanation //
////////////////////////
rule step1ReasonSameNum {
	when {
		p: Problem p.goal === "step1" && p.num1 == p.num2;
	}
	then {
		if (checkSAI({selection: "step_1_reason", action: "UpdateRadioButton", input: "step_1_reason\n-option-0: The numerators are the same."})) {
			modify(p, "goal", "step5");
			assert(new TPA("step_5_practice", "SetVisible", true));
			halt();
		} else {
			backtrack();
		}
	}
}

rule step1ReasonSameDen {
	when {
		p: Problem p.goal === "step1" && p.den1 == p.den2;
	}
	then {
		if (checkSAI({selection: "step_1_reason", action: "UpdateRadioButton", input: "step_1_reason\n-option-1: The denominators are the same."})) {
			modify(p, "goal", "step5");
			assert(new TPA("step_5_practice", "SetVisible", true));
			halt();
		} else {
			backtrack();
		}
	}
}

// rule step1ReasonCompareToOne {
// 	when {
// 		p: Problem p.goal === "step1" && ( (p.num1/p.den1 < 1 && p.num2/p.den2 > 1) || (p.num1/p.den1 > 1 && p.num2/p.den2 < 1) );
// 	}
// 	then {
// 		if (checkSAI({selection: "step_1_reason", action: "UpdateRadioButton", input: "step_1_reason\n-option-2: One of the fractions is less than 1 and the other is greater than 1."})) {
// 			modify(p, "goal", "step5");
// 			assert(new TPA("step_5_practice", "SetVisible", true));
// 			halt();
// 		} else {
// 			backtrack();
// 		}
// 	}
// }

// rule step1ReasonUnlikeFractions {
// 	when {
// 		p: Problem p.goal === "step1" && !canCompare(p.num1, p.den1, p.num2, p.den2);
// 	}
// 	then {
// 		if (checkSAI({selection: "step_1_reason", action: "UpdateRadioButton", input: "step_1_reason\n-option-3: None of the above"})) {
// 			modify(p, "goal", "step2");
// 			halt();
// 		} else {
// 			backtrack();
// 		}
// 	}
// }

////////////////////////
// Step 2 Explanation //
////////////////////////
